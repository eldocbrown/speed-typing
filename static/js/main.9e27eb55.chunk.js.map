{"version":3,"sources":["wordCounter.js","hooks/useWordGame.js","App.js","index.js"],"names":["wordCounter","text","wom","match","charactersNoSpaces","replace","length","characters","words","lines","split","wordsReducer","useWordGame","initialTime","initialWords","initialRunning","initialWordCount","useReducer","wordsDispatch","useState","time","setTime","running","setRunning","wordCount","setWordCount","textAreaRef","useRef","btnRef","useEffect","current","value","innerHTML","setTimeout","prevTime","handleChange","event","target","handleClick","disabled","focus","App","className","ref","name","onChange","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAAMA,EAAc,SAACC,GACnB,IAAMC,EAAMD,EAAKE,MAAM,QACvB,MAAO,CACHC,mBAAqBH,EAAKI,QAAQ,OAAQ,IAAIC,OAC9CC,WAAqBN,EAAKK,OAC1BE,MAAqBN,EAAMA,EAAII,OAAS,EACxCG,MAAqBR,EAAKS,MAAM,SAASJ,SCH/C,SAASK,EAAaH,EAAOP,GAC3B,OAAOA,EAuDMW,MApDf,WAKa,IAJDC,EAIA,uDAJc,GACdC,EAGA,uDAHe,GACfC,EAEA,wDADAC,EACA,uDADmB,EACnB,EAGuBC,qBAAWN,EAAcG,GAHhD,mBAGFN,EAHE,KAGKU,EAHL,OAIgBC,mBAASN,GAJzB,mBAIFO,EAJE,KAIIC,EAJJ,OAKsBF,mBAASJ,GAL/B,mBAKFO,EALE,KAKOC,EALP,OAM0BJ,mBAASH,GANnC,mBAMFQ,EANE,KAMSC,EANT,KASJC,EAAcC,iBAAO,MACrBC,EAASD,iBAAO,MAGtBE,qBAAU,WACJP,IACW,IAATF,GACFG,GAAW,GACXE,EAAazB,EAAY0B,EAAYI,QAAQC,OAAOvB,OACpDoB,EAAOE,QAAQE,UAAY,cAG3BC,YACE,kBAAMZ,GAAQ,SAACa,GAAD,OAAcA,EAAW,OACrC,QAIP,CAACd,EAAME,EAASI,IAGnB,IAAMS,EAAe,SAACC,GAAW,IACvBL,EAAUK,EAAMC,OAAhBN,MACRb,EAAca,IAGVO,EAAc,SAACF,GACnBlB,EAAc,IACdO,EAAa,GACbJ,EAAQR,GACRU,GAAW,GACXG,EAAYI,QAAQS,UAAW,EAC/Bb,EAAYI,QAAQU,SAGtB,MAAO,CAAEd,cAAaE,SAAQpB,QAAOc,UAASF,OAAMI,YAAWW,eAAcG,gB,OClChEG,MAjBf,WAEE,IAFa,EAI+E7B,EAFxE,GAEZc,EAJK,EAILA,YAAaE,EAJR,EAIQA,OAAQpB,EAJhB,EAIgBA,MAAOc,EAJvB,EAIuBA,QAASF,EAJhC,EAIgCA,KAAMI,EAJtC,EAIsCA,UAAWW,EAJjD,EAIiDA,aAAcG,EAJ/D,EAI+DA,YAE5E,OACE,sBAAKI,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oCACA,0BAAUA,UAAU,YAAYC,IAAKjB,EAAakB,KAAK,QAAQb,MAAOvB,EAAOqC,SAAUV,EAAcI,UAAWjB,IAChH,qBAAIoB,UAAU,WAAd,6BAA2CtB,KAC3C,wBAAQsB,UAAU,MAAMC,IAAKf,EAAQkB,QAASR,EAAaC,SAAUjB,EAArE,mBACA,qBAAIoB,UAAU,QAAd,yBAAmClB,SCXzCuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.9e27eb55.chunk.js","sourcesContent":["const wordCounter = (text) => {\n  const wom = text.match(/\\S+/g);\n  return {\n      charactersNoSpaces : text.replace(/\\s+/g, '').length,\n      characters         : text.length,\n      words              : wom ? wom.length : 0,\n      lines              : text.split(/\\r*\\n/).length\n  }\n}\n\nexport { wordCounter }\n","import {useState, useEffect, useRef, useReducer} from 'react'\nimport { wordCounter } from '../wordCounter'\n\nfunction wordsReducer(words, text) {\n  return text\n}\n\nfunction useWordGame(\n            initialTime = 15,\n            initialWords = '',\n            initialRunning = false,\n            initialWordCount = 0\n          ) {\n\n  // State\n  const [ words, wordsDispatch ] = useReducer(wordsReducer, initialWords)\n  const [ time, setTime ] = useState(initialTime)\n  const [ running, setRunning ] = useState(initialRunning)\n  const [ wordCount, setWordCount ] = useState(initialWordCount)\n\n  // References\n  const textAreaRef = useRef(null)\n  const btnRef = useRef(null)\n\n  // Hooks\n  useEffect(() => {\n    if (running) {\n      if (time === 0) { // Game ended\n        setRunning(false)\n        setWordCount(wordCounter(textAreaRef.current.value).words)\n        btnRef.current.innerHTML = \"Play again\"\n      }\n      else { // Keep running\n        setTimeout(\n          () => setTime((prevTime) => prevTime - 1)\n          , 1000\n        )\n      }\n    }\n  }, [time, running, textAreaRef])\n\n  // Event Handlers\n  const handleChange = (event) => {\n    const { value } = event.target\n    wordsDispatch(value)\n  }\n\n  const handleClick = (event) => {\n    wordsDispatch('')\n    setWordCount(0)\n    setTime(initialTime)\n    setRunning(true)\n    textAreaRef.current.disabled = false // You have to do this becasuse states are changed async\n    textAreaRef.current.focus()\n  }\n\n  return { textAreaRef, btnRef, words, running, time, wordCount, handleChange, handleClick }\n}\n\nexport default useWordGame\n","import React from 'react'\nimport './css/App.css'\nimport useWordGame from './hooks/useWordGame'\n\n\nfunction App() {\n  // Variables\n  const initialTime = 5\n\n  const { textAreaRef, btnRef, words, running, time, wordCount, handleChange, handleClick } = useWordGame(initialTime)\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title\">How fast can you type?</h1>\n      <textarea className=\"inputArea\" ref={textAreaRef} name=\"words\" value={words} onChange={handleChange} disabled={!running}/>\n      <h4 className=\"subtitle\" >Time remaining: {time}</h4>\n      <button className=\"btn\" ref={btnRef} onClick={handleClick} disabled={running}>Start</button>\n      <h1 className=\"title\">Word count: {wordCount}</h1>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}